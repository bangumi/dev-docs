components:
  schemas:
    Avatar:
      properties:
        large:
          type: string
        medium:
          example: sai
          type: string
        small:
          type: string
      required:
        - small
        - medium
        - large
      title: Avatar
      type: object
    BaseEpisodeComment:
      properties:
        content:
          type: string
        createdAt:
          type: integer
        creatorID:
          type: integer
        epID:
          type: integer
        id:
          type: integer
        relatedID:
          type: integer
        state:
          type: integer
        user:
          $ref: '#/components/schemas/User'
      required:
        - id
        - epID
        - creatorID
        - relatedID
        - createdAt
        - content
        - state
        - user
      type: object
    BasicReply:
      properties:
        createdAt:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        id:
          type: integer
        state:
          type: integer
        text:
          type: string
      required:
        - id
        - creator
        - createdAt
        - text
        - state
      type: object
    Character:
      properties:
        collects:
          type: integer
        comment:
          type: integer
        id:
          type: integer
        images:
          $ref: '#/components/schemas/PersonImages'
        infobox:
          $ref: '#/components/schemas/Infobox'
        lock:
          type: boolean
        name:
          type: string
        nsfw:
          type: boolean
        redirect:
          type: integer
        role:
          type: integer
        summary:
          type: string
      required:
        - id
        - name
        - role
        - infobox
        - summary
        - comment
        - collects
        - lock
        - redirect
        - nsfw
      title: Character
      type: object
    CurrentUser:
      allOf:
        - properties:
            avatar:
              properties:
                large:
                  type: string
                medium:
                  examples:
                    - sai
                  type: string
                small:
                  type: string
              required:
                - small
                - medium
                - large
              title: Avatar
              type: object
            id:
              examples:
                - 1
              type: integer
            nickname:
              examples:
                - Saiüññ
              type: string
            sign:
              type: string
            user_group:
              type: integer
            username:
              examples:
                - sai
              type: string
          required:
            - id
            - username
            - nickname
            - avatar
            - sign
            - user_group
          title: User
          type: object
        - properties:
            permission:
              properties:
                subjectWikiEdit:
                  type: boolean
              required:
                - subjectWikiEdit
              type: object
          required:
            - permission
          type: object
      type: object
    EpisodeComments:
      allOf:
        - properties:
            content:
              type: string
            createdAt:
              type: integer
            creatorID:
              type: integer
            epID:
              type: integer
            id:
              type: integer
            relatedID:
              type: integer
            state:
              type: integer
            user:
              $ref: '#/components/schemas/User'
          required:
            - id
            - epID
            - creatorID
            - relatedID
            - createdAt
            - content
            - state
            - user
          type: object
        - properties:
            replies:
              items:
                $ref: '#/components/schemas/BaseEpisodeComment'
              type: array
          required:
            - replies
          type: object
      type: object
    EpisodeWikiInfo:
      properties:
        date:
          description: YYYY-MM-DD
          example: '2022-02-02'
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        duration:
          example: '24:53'
          type: string
        ep:
          type: number
        id:
          type: integer
        name:
          type: string
        nameCN:
          type: string
        subjectID:
          type: integer
        summary:
          type: string
        type:
          anyOf:
            - enum:
                - 0
              type: number
            - enum:
                - 1
              type: number
            - enum:
                - 2
              type: number
            - enum:
                - 3
              type: number
            - enum:
                - 4
              type: number
            - enum:
                - 5
              type: number
            - enum:
                - 6
              type: number
      required:
        - id
        - subjectID
        - name
        - nameCN
        - type
        - ep
        - duration
        - summary
      type: object
    ErrorResponse:
      description: default error response type
      properties:
        code:
          type: string
        error:
          type: string
        message:
          type: string
        statusCode:
          type: integer
      required:
        - code
        - error
        - message
        - statusCode
      type: object
    Group:
      properties:
        createdAt:
          type: integer
        description:
          type: string
        icon:
          type: string
        id:
          type: integer
        name:
          type: string
        nsfw:
          type: boolean
        title:
          type: string
        totalMembers:
          type: integer
      required:
        - id
        - name
        - nsfw
        - title
        - icon
        - description
        - totalMembers
        - createdAt
      type: object
    GroupMember:
      properties:
        avatar:
          properties:
            large:
              type: string
            medium:
              example: sai
              type: string
            small:
              type: string
          required:
            - small
            - medium
            - large
          title: Avatar
          type: object
        id:
          type: integer
        joinedAt:
          type: integer
        nickname:
          type: string
        username:
          type: string
      required:
        - avatar
        - id
        - nickname
        - username
        - joinedAt
      type: object
    GroupProfile:
      properties:
        group:
          $ref: '#/components/schemas/Group'
        inGroup:
          description: ÊòØÂê¶Â∑≤ÁªèÂä†ÂÖ•Â∞èÁªÑ
          type: boolean
        recentAddedMembers:
          items:
            $ref: '#/components/schemas/GroupMember'
          type: array
        topics:
          items:
            $ref: '#/components/schemas/Topic'
          type: array
        totalTopics:
          type: integer
      required:
        - recentAddedMembers
        - topics
        - inGroup
        - group
        - totalTopics
      type: object
    GroupReply:
      properties:
        createdAt:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        id:
          type: integer
        state:
          type: integer
        text:
          type: string
        topicID:
          type: integer
        topicTitle:
          type: string
      required:
        - id
        - creator
        - createdAt
        - text
        - state
        - topicID
        - topicTitle
      type: object
    HistorySummary:
      properties:
        commitMessage:
          type: string
        createdAt:
          description: unix timestamp seconds
          type: integer
        creator:
          properties:
            username:
              type: string
          required:
            - username
          type: object
        type:
          description: ‰øÆÊîπÁ±ªÂûã„ÄÇ`1` Ê≠£Â∏∏‰øÆÊîπÔºå `11` ÂêàÂπ∂Ôºå`103` ÈîÅÂÆö/Ëß£ÈîÅ `104` Êú™Áü•
          type: integer
      required:
        - creator
        - type
        - commitMessage
        - createdAt
      type: object
    Index:
      properties:
        collects:
          type: integer
        createdAt:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        desc:
          type: string
        id:
          type: integer
        replies:
          type: integer
        title:
          type: string
        total:
          type: integer
        type:
          type: integer
        updatedAt:
          type: integer
      required:
        - id
        - type
        - title
        - desc
        - replies
        - total
        - collects
        - createdAt
        - updatedAt
        - creator
      title: Index
      type: object
    Infobox:
      additionalProperties:
        items:
          properties:
            k:
              type: string
            v:
              type: string
          required:
            - v
          title: InfoboxValue
          type: object
        type: array
      title: Infobox
      type: object
    InfoboxValue:
      properties:
        k:
          type: string
        v:
          type: string
      required:
        - v
      title: InfoboxValue
      type: object
    LoginRequestBody:
      example:
        cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
        email: treeholechan@gmail.com
        password: lovemeplease
      properties:
        cf-turnstile-response:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      required:
        - email
        - password
        - cf-turnstile-response
      type: object
    Notice:
      properties:
        createdAt:
          description: unix timestamp in seconds
          type: integer
        id:
          type: integer
        postID:
          type: integer
        sender:
          properties:
            avatar:
              properties:
                large:
                  type: string
                medium:
                  example: sai
                  type: string
                small:
                  type: string
              required:
                - small
                - medium
                - large
              title: Avatar
              type: object
            id:
              example: 1
              type: integer
            nickname:
              example: Saiüññ
              type: string
            sign:
              type: string
            user_group:
              type: integer
            username:
              example: sai
              type: string
          required:
            - id
            - username
            - nickname
            - avatar
            - sign
            - user_group
          title: User
          type: object
        title:
          type: string
        topicID:
          type: integer
        type:
          description: Êü•Áúã `./lib/notify.ts` _settings
          type: integer
        unread:
          type: boolean
      required:
        - id
        - title
        - type
        - sender
        - topicID
        - postID
        - createdAt
        - unread
      type: object
    Permission:
      properties:
        subjectWikiEdit:
          type: boolean
      required:
        - subjectWikiEdit
      type: object
    Person:
      properties:
        career:
          description: ËÅå‰∏ö
          example: producer
          items:
            type: string
          type: array
        collects:
          type: integer
        comment:
          type: integer
        id:
          type: integer
        images:
          $ref: '#/components/schemas/PersonImages'
        infobox:
          $ref: '#/components/schemas/Infobox'
        lock:
          type: boolean
        name:
          type: string
        nsfw:
          type: boolean
        redirect:
          type: integer
        summary:
          type: string
        type:
          type: integer
      required:
        - id
        - name
        - type
        - infobox
        - career
        - summary
        - comment
        - collects
        - lock
        - redirect
        - nsfw
      title: Person
      type: object
    PersonImages:
      properties:
        grid:
          type: string
        large:
          type: string
        medium:
          type: string
        small:
          type: string
      required:
        - large
        - medium
        - small
        - grid
      title: PersonImages
      type: object
    Reaction:
      properties:
        selected:
          type: boolean
        total:
          type: integer
        value:
          type: integer
      required:
        - selected
        - total
        - value
      type: object
    RecentWikiChange:
      properties:
        persons:
          items:
            properties:
              createdAt:
                type: integer
              id:
                type: integer
            required:
              - id
              - createdAt
            type: object
          type: array
        subject:
          items:
            properties:
              createdAt:
                type: integer
              id:
                type: integer
            required:
              - id
              - createdAt
            type: object
          type: array
      required:
        - subject
        - persons
      type: object
    Reply:
      properties:
        createdAt:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        id:
          type: integer
        isFriend:
          type: boolean
        reactions:
          items:
            $ref: '#/components/schemas/Reaction'
          type: array
        replies:
          items:
            $ref: '#/components/schemas/SubReply'
          type: array
        state:
          type: integer
        text:
          type: string
      required:
        - id
        - isFriend
        - replies
        - creator
        - createdAt
        - text
        - state
        - reactions
      type: object
    SlimCharacter:
      properties:
        id:
          type: integer
        images:
          $ref: '#/components/schemas/PersonImages'
        lock:
          type: boolean
        name:
          type: string
        nsfw:
          type: boolean
        role:
          type: integer
      required:
        - id
        - name
        - role
        - lock
        - nsfw
      title: SlimCharacter
      type: object
    SlimIndex:
      properties:
        createdAt:
          type: integer
        id:
          type: integer
        title:
          type: string
        total:
          type: integer
        type:
          type: integer
      required:
        - id
        - type
        - title
        - total
        - createdAt
      title: SlimIndex
      type: object
    SlimPerson:
      properties:
        id:
          type: integer
        images:
          $ref: '#/components/schemas/PersonImages'
        lock:
          type: boolean
        name:
          type: string
        nsfw:
          type: boolean
        type:
          type: integer
      required:
        - id
        - name
        - type
        - lock
        - nsfw
      title: SlimPerson
      type: object
    SlimSubject:
      example:
        id: 8
        images:
          common: https://lain.bgm.tv/pic/cover/c/c9/f0/8_wK0z3.jpg
          grid: https://lain.bgm.tv/pic/cover/g/c9/f0/8_wK0z3.jpg
          large: https://lain.bgm.tv/pic/cover/l/c9/f0/8_wK0z3.jpg
          medium: https://lain.bgm.tv/pic/cover/m/c9/f0/8_wK0z3.jpg
          small: https://lain.bgm.tv/pic/cover/s/c9/f0/8_wK0z3.jpg
        locked: false
        name: „Ç≥„Éº„Éâ„ÇÆ„Ç¢„Çπ ÂèçÈÄÜ„ÅÆ„É´„É´„Éº„Ç∑„É•R2
        nameCN: Code Geass ÂèçÂèõÁöÑÈ≤ÅË∑Ø‰øÆR2
        nsfw: false
        type: 2
      properties:
        id:
          type: integer
        images:
          $ref: '#/components/schemas/SubjectImages'
        locked:
          type: boolean
        name:
          type: string
        nameCN:
          type: string
        nsfw:
          type: boolean
        type:
          anyOf:
            - enum:
                - 1
              type: number
            - enum:
                - 2
              type: number
            - enum:
                - 3
              type: number
            - enum:
                - 4
              type: number
            - enum:
                - 6
              type: number
      required:
        - id
        - name
        - nameCN
        - type
        - locked
        - nsfw
      title: SlimSubject
      type: object
    SubReply:
      properties:
        createdAt:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        id:
          type: integer
        isFriend:
          type: boolean
        reactions:
          items:
            $ref: '#/components/schemas/Reaction'
          type: array
        state:
          type: integer
        text:
          type: string
      required:
        - id
        - creator
        - createdAt
        - isFriend
        - text
        - state
        - reactions
      type: object
    Subject:
      properties:
        date:
          type: string
        id:
          type: integer
        image:
          type: string
        infobox:
          type: string
        locked:
          type: boolean
        name:
          type: string
        nsfw:
          type: boolean
        platform:
          type: integer
        redirect:
          type: integer
        summary:
          type: string
        typeID:
          type: integer
      required:
        - id
        - name
        - typeID
        - infobox
        - platform
        - summary
        - nsfw
        - date
        - redirect
        - locked
        - image
      type: object
    SubjectAirtime:
      properties:
        date:
          type: string
        month:
          type: integer
        weekday:
          type: integer
        year:
          type: integer
      required:
        - date
        - month
        - weekday
        - year
      title: SubjectAirtime
      type: object
    SubjectCollection:
      additionalProperties:
        type: integer
      title: SubjectCollection
      type: object
    SubjectEdit:
      example:
        infobox: |-
          {{Infobox animanga/TVAnime
          |‰∏≠ÊñáÂêç= Ê≤ôÁõí
          |Âà´Âêç={
          }
          |ËØùÊï∞= 7
          |ÊîæÈÄÅÂºÄÂßã= 0000-10-06
          |ÊîæÈÄÅÊòüÊúü= 
          |ÂÆòÊñπÁΩëÁ´ô= 
          |Êí≠ÊîæÁîµËßÜÂè∞= 
          |ÂÖ∂‰ªñÁîµËßÜÂè∞= 
          |Êí≠ÊîæÁªìÊùü= 
          |ÂÖ∂‰ªñ= 
          |Copyright= 
          |Âπ≥Âè∞={
          [ÈæüÂ£≥]
          [Xbox Series S]
          [Xbox Series X]
          [Xbox Series X/S]
          [PC]
          [Xbox Series X|S]
          }
          }}
        name: Ê≤ôÁõí
        nsfw: false
        platform: 0
        summary: |-
          Êú¨Êù°ÁõÆÊòØ‰∏Ä‰∏™Ê≤ôÁõíÔºåÂèØ‰ª•Áî®‰∫éÂ∞ùËØïbgmÂäüËÉΩ„ÄÇ

          ÊôÆÈÄöÁª¥Âü∫‰∫∫ÂèØ‰ª•ÈöèÊÑèÁºñËæëÊù°ÁõÆ‰ø°ÊÅØ‰ª•ÂèäÁõ∏ÂÖ≥ÂÖ≥ËÅîÊü•ÁúãÁºñËæëÊïàÊûúÔºå‰ΩÜÊòØËØ∑‰∏çË¶ÅÂÆåÂÖ®Âà†Èô§Ê≤ôÁõíËØ¥ÊòéÂπ∂‰∏î‰∏çË¶ÅÂÖ≥ËÅîÈùûÊ≤ôÁõíÊù°ÁõÆ/‰∫∫Áâ©/ËßíËâ≤„ÄÇ

          https://bgm.tv/group/topic/366812#post_1923517
      properties:
        date:
          example: '0000-00-00'
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
        infobox:
          minLength: 1
          type: string
        metaTags:
          items:
            type: string
          type: array
        name:
          minLength: 1
          type: string
        nsfw:
          type: boolean
        platform:
          type: integer
        summary:
          type: string
      required:
        - name
        - infobox
        - platform
        - nsfw
        - metaTags
        - summary
      type: object
    SubjectImages:
      properties:
        common:
          type: string
        grid:
          type: string
        large:
          type: string
        medium:
          type: string
        small:
          type: string
      required:
        - large
        - common
        - medium
        - small
        - grid
      title: SubjectImages
      type: object
    SubjectInterestComment:
      properties:
        list:
          items:
            properties:
              comment:
                type: string
              rate:
                type: integer
              updatedAt:
                type: integer
              user:
                $ref: '#/components/schemas/User'
            required:
              - user
              - rate
              - comment
              - updatedAt
            type: object
          type: array
        total:
          type: integer
      required:
        - total
        - list
      type: object
    SubjectNew:
      properties:
        infobox:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        nsfw:
          type: boolean
        platform:
          type: integer
        summary:
          type: string
        type:
          anyOf:
            - enum:
                - 1
              type: number
            - enum:
                - 2
              type: number
            - enum:
                - 3
              type: number
            - enum:
                - 4
              type: number
            - enum:
                - 6
              type: number
      required:
        - name
        - type
        - platform
        - infobox
        - nsfw
        - summary
      type: object
    SubjectPlatform:
      properties:
        alias:
          type: string
        enableHeader:
          type: boolean
        id:
          type: integer
        order:
          type: integer
        searchString:
          type: string
        sortKeys:
          items:
            type: string
          type: array
        type:
          type: string
        typeCN:
          type: string
        wikiTpl:
          type: string
      required:
        - id
        - type
        - typeCN
        - alias
      title: SubjectPlatform
      type: object
    SubjectRating:
      properties:
        count:
          items:
            type: integer
          type: array
        score:
          type: number
        total:
          type: integer
      required:
        - count
        - score
        - total
      title: SubjectRating
      type: object
    SubjectWikiInfo:
      properties:
        id:
          type: integer
        infobox:
          type: string
        name:
          type: string
        summary:
          type: string
        typeID:
          anyOf:
            - enum:
                - 1
              type: number
            - enum:
                - 2
              type: number
            - enum:
                - 3
              type: number
            - enum:
                - 4
              type: number
            - enum:
                - 6
              type: number
      required:
        - id
        - name
        - typeID
        - infobox
        - summary
      type: object
    Topic:
      properties:
        createdAt:
          description: ÂèëÂ∏ñÊó∂Èó¥Ôºåunix time stamp in seconds
          type: integer
        creator:
          properties:
            avatar:
              properties:
                large:
                  type: string
                medium:
                  example: sai
                  type: string
                small:
                  type: string
              required:
                - small
                - medium
                - large
              title: Avatar
              type: object
            id:
              example: 1
              type: integer
            nickname:
              example: Saiüññ
              type: string
            sign:
              type: string
            user_group:
              type: integer
            username:
              example: sai
              type: string
          required:
            - id
            - username
            - nickname
            - avatar
            - sign
            - user_group
          title: User
          type: object
        id:
          description: topic id
          type: integer
        parentID:
          description: Â∞èÁªÑ/Êù°ÁõÆID
          type: integer
        repliesCount:
          type: integer
        title:
          type: string
        updatedAt:
          description: ÊúÄÂêéÂõûÂ§çÊó∂Èó¥Ôºåunix time stamp in seconds
          type: integer
      required:
        - id
        - creator
        - title
        - parentID
        - createdAt
        - updatedAt
        - repliesCount
      title: Topic
      type: object
    TopicCreation:
      example:
        cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
        content: topic content
        title: topic title
      properties:
        cf-turnstile-response:
          minLength: 1
          type: string
        text:
          description: bbcode
          minLength: 1
          type: string
        title:
          minLength: 1
          type: string
      required:
        - title
        - text
        - cf-turnstile-response
      type: object
    TopicDetail:
      properties:
        createdAt:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        id:
          type: integer
        parent:
          anyOf:
            - $ref: '#/components/schemas/Group'
            - $ref: '#/components/schemas/Subject'
        reactions:
          items:
            $ref: '#/components/schemas/Reaction'
          type: array
        replies:
          items:
            $ref: '#/components/schemas/Reply'
          type: array
        state:
          type: integer
        text:
          type: string
        title:
          type: string
      required:
        - id
        - parent
        - creator
        - title
        - text
        - state
        - createdAt
        - replies
        - reactions
      type: object
    User:
      properties:
        avatar:
          properties:
            large:
              type: string
            medium:
              example: sai
              type: string
            small:
              type: string
          required:
            - small
            - medium
            - large
          title: Avatar
          type: object
        id:
          example: 1
          type: integer
        nickname:
          example: Saiüññ
          type: string
        sign:
          type: string
        user_group:
          type: integer
        username:
          example: sai
          type: string
      required:
        - id
        - username
        - nickname
        - avatar
        - sign
        - user_group
      title: User
      type: object
    UserCollectionsCharacterSummary:
      properties:
        count:
          type: integer
        detail:
          items:
            $ref: '#/components/schemas/SlimCharacter'
          type: array
      required:
        - count
        - detail
      type: object
    UserCollectionsPersonSummary:
      properties:
        count:
          type: integer
        detail:
          items:
            $ref: '#/components/schemas/SlimPerson'
          type: array
      required:
        - count
        - detail
      type: object
    UserCollectionsSubjectSummary:
      properties:
        counts:
          additionalProperties:
            type: integer
          example:
            '1': 0
            '2': 0
            '3': 0
            '4': 0
            '5': 0
          type: object
        details:
          additionalProperties:
            items:
              $ref: '#/components/schemas/SlimSubject'
            type: array
          example:
            '1': []
            '2':
              - id: 8
                images:
                  common: https://lain.bgm.tv/pic/cover/c/c9/f0/8_wK0z3.jpg
                  grid: https://lain.bgm.tv/pic/cover/g/c9/f0/8_wK0z3.jpg
                  large: https://lain.bgm.tv/pic/cover/l/c9/f0/8_wK0z3.jpg
                  medium: https://lain.bgm.tv/pic/cover/m/c9/f0/8_wK0z3.jpg
                  small: https://lain.bgm.tv/pic/cover/s/c9/f0/8_wK0z3.jpg
                locked: false
                name: „Ç≥„Éº„Éâ„ÇÆ„Ç¢„Çπ ÂèçÈÄÜ„ÅÆ„É´„É´„Éº„Ç∑„É•R2
                nameCN: Code Geass ÂèçÂèõÁöÑÈ≤ÅË∑Ø‰øÆR2
                nsfw: false
                type: 2
            '3': []
            '4': []
            '5': []
          type: object
      required:
        - counts
        - details
      type: object
    UserCollectionsSummary:
      properties:
        character:
          $ref: '#/components/schemas/UserCollectionsCharacterSummary'
        index:
          $ref: '#/components/schemas/UserIndexesSummary'
        person:
          $ref: '#/components/schemas/UserCollectionsPersonSummary'
        subject:
          additionalProperties:
            $ref: '#/components/schemas/UserCollectionsSubjectSummary'
          example:
            '1':
              counts:
                '1': 0
                '2': 1
                '3': 0
                '4': 0
                '5': 0
              details:
                '1': []
                '2':
                  - id: 8
                    images:
                      common: https://lain.bgm.tv/pic/cover/c/c9/f0/8_wK0z3.jpg
                      grid: https://lain.bgm.tv/pic/cover/g/c9/f0/8_wK0z3.jpg
                      large: https://lain.bgm.tv/pic/cover/l/c9/f0/8_wK0z3.jpg
                      medium: https://lain.bgm.tv/pic/cover/m/c9/f0/8_wK0z3.jpg
                      small: https://lain.bgm.tv/pic/cover/s/c9/f0/8_wK0z3.jpg
                    locked: false
                    name: „Ç≥„Éº„Éâ„ÇÆ„Ç¢„Çπ ÂèçÈÄÜ„ÅÆ„É´„É´„Éº„Ç∑„É•R2
                    nameCN: Code Geass ÂèçÂèõÁöÑÈ≤ÅË∑Ø‰øÆR2
                    nsfw: false
                    type: 2
                '3': []
                '4': []
                '5': []
          type: object
      required:
        - subject
        - character
        - person
        - index
      type: object
    UserIndexesSummary:
      properties:
        count:
          type: integer
        detail:
          items:
            $ref: '#/components/schemas/SlimIndex'
          type: array
      required:
        - count
        - detail
      type: object
    UserSubjectCollection:
      properties:
        comment:
          type: string
        epStatus:
          type: integer
        private:
          type: boolean
        rate:
          type: integer
        subject:
          $ref: '#/components/schemas/Subject'
        tags:
          items:
            type: string
          type: array
        type:
          anyOf:
            - enum:
                - 1
              type: number
            - enum:
                - 2
              type: number
            - enum:
                - 3
              type: number
            - enum:
                - 4
              type: number
            - enum:
                - 5
              type: number
        updatedAt:
          type: integer
        volStatus:
          type: integer
      required:
        - subject
        - rate
        - type
        - comment
        - tags
        - epStatus
        - volStatus
        - private
        - updatedAt
      type: object
    WikiPlatform:
      properties:
        id:
          type: integer
        text:
          type: string
        wiki_tpl:
          type: string
      required:
        - id
        - text
      type: object
  securitySchemes:
    CookiesSession:
      description: ‰ΩøÁî® [login](#/auth/login) Ë∞ÉÁî® API ÁôªÂΩïÔºåÊàñËÄÖ ‰ΩøÁî® [demo](/demo/login) ÁôªÂΩï
      in: cookie
      name: chiiNextSessionID
      type: apiKey
    HTTPBearer:
      description: ‰ΩøÁî® [demo](/demo/login) ÁôªÂΩïÂêéÂàõÂª∫‰∏™‰∫∫‰ª§Áâå
      scheme: Bearer
      type: http
info:
  description: >-
    ÂÖ≥‰∫éËÆ¢ÈòÖÈÄöÁü•ÁöÑ socket.io Áõ∏ÂÖ≥ÁöÑÊñáÊ°£Âú®
    <https://github.com/bangumi/GraphQL/blob/master/docs/socket.io.md>
  title: bangumi private api
openapi: 3.0.3
paths:
  /p1/blocklist:
    get:
      operationId: getBlocklist
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  blocklist:
                    items:
                      type: integer
                    type: array
                required:
                  - blocklist
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Ëé∑ÂèñÁªù‰∫§Áî®Êà∑ÂàóË°®
      tags:
        - user
    post:
      operationId: addToBlocklist
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
              required:
                - id
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  blocklist:
                    items:
                      type: integer
                    type: array
                required:
                  - blocklist
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Â∞ÜÁî®Êà∑Ê∑ªÂä†Âà∞Áªù‰∫§ÂàóË°®
      tags:
        - user
  /p1/blocklist/{id}:
    delete:
      operationId: removeFromBlocklist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  blocklist:
                    items:
                      type: integer
                    type: array
                required:
                  - blocklist
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Â∞ÜÁî®Êà∑‰ªéÁªù‰∫§ÂàóË°®ÁßªÂá∫
      tags:
        - user
  /p1/clear-notify:
    post:
      description: |-
        Ê†áËÆ∞ÈÄöÁü•‰∏∫Â∑≤ËØª

        ‰∏ç‰º†idÊó∂‰ºöÊ∏ÖÁ©∫ÊâÄÊúâÊú™ËØªÈÄöÁü•
      operationId: clearNotice
      requestBody:
        content:
          application/json:
            examples:
              ClearAll:
                value: {}
              ClearSome:
                value:
                  id:
                    - 1
                    - 2
            schema:
              properties:
                id:
                  items:
                    type: integer
                  type: array
              type: object
      responses:
        '200':
          description: Ê≤°ÊúâËøîÂõûÂÄº
        '401':
          content:
            application/json:
              examples:
                NeedLoginError:
                  value:
                    code: NEED_LOGIN
                    error: Unauthorized
                    message: you need to login before marking notifications as read
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Êú™ÁôªÂΩï
          description: Êú™ÁôªÂΩï
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      summary: Ê†áËÆ∞ÈÄöÁü•‰∏∫Â∑≤ËØª
      tags:
        - user
  /p1/groups/-/posts/{postID}:
    delete:
      operationId: deleteGroupPost
      parameters:
        - example: 2092074
          in: path
          name: postID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to delete this post
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: post not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - group
    get:
      operationId: getGroupPost
      parameters:
        - example: 2092074
          in: path
          name: postID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupReply'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: post not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - group
    put:
      operationId: editGroupPost
      parameters:
        - example: 2092074
          in: path
          name: postID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            example:
              text: new post contents
            schema:
              properties:
                text:
                  minLength: 1
                  type: string
              required:
                - text
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to edit reply
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - group
  /p1/groups/-/topics/{id}:
    get:
      description: Ëé∑ÂèñÂ∏ñÂ≠êÂàóË°®
      operationId: getGroupTopicDetail
      parameters:
        - example: 371602
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicDetail'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NotFoundError:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: topic not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Â∞èÁªÑ‰∏çÂ≠òÂú®
          description: Â∞èÁªÑ‰∏çÂ≠òÂú®
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - topic
  /p1/groups/-/topics/{topicID}:
    put:
      operationId: editGroupTopic
      parameters:
        - example: 371602
          in: path
          name: topicID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreation'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to edit a topic
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - group
  /p1/groups/-/topics/{topicID}/replies:
    post:
      operationId: createGroupReply
      parameters:
        - example: 371602
          in: path
          name: topicID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            examples:
              example1:
                value:
                  cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
                  content: post contents
              example2:
                value:
                  cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
                  content: post contents
                  replyTo: 2
            schema:
              properties:
                cf-turnstile-response:
                  minLength: 1
                  type: string
                content:
                  minLength: 1
                  type: string
                replyTo:
                  default: 0
                  description: Ë¢´ÂõûÂ§çÁöÑ topic ID, `0` ‰ª£Ë°®ÂõûÂ§çÊ•º‰∏ª
                  example: 0
                  type: integer
              required:
                - content
                - cf-turnstile-response
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicReply'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_JOIN_PRIVATE_GROUP_ERROR:
                  value:
                    code: NOT_JOIN_PRIVATE_GROUP_ERROR
                    error: Unauthorized
                    message: >-
                      you need to join private group 'Ê≤ôÁõí' before you create a
                      post or reply
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - group
  /p1/groups/{groupName}/members:
    get:
      description: Ëé∑ÂèñÂ∏ñÂ≠êÂàóË°®
      operationId: listGroupMembersByName
      parameters:
        - in: query
          name: type
          required: false
          schema:
            anyOf:
              - enum:
                  - mod
                type: string
              - enum:
                  - normal
                type: string
              - enum:
                  - all
                type: string
            default: all
        - in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 40
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: groupName
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/GroupMember'
                    type: array
                  total:
                    type: integer
                required:
                  - data
                  - total
                type: object
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NotFoundError:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: topic not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Â∞èÁªÑ‰∏çÂ≠òÂú®
          description: Â∞èÁªÑ‰∏çÂ≠òÂú®
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - topic
  /p1/groups/{groupName}/profile:
    get:
      description: Ëé∑ÂèñÂ∞èÁªÑÈ¶ñÈ°µ
      operationId: getGroupProfile
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            default: 20
            maximum: 40
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            minimum: 0
            type: integer
        - in: path
          name: groupName
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupProfile'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NotFoundError:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: topic not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Â∞èÁªÑ‰∏çÂ≠òÂú®
          description: Â∞èÁªÑ‰∏çÂ≠òÂú®
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - topic
  /p1/groups/{groupName}/topics:
    get:
      description: Ëé∑ÂèñÂ∏ñÂ≠êÂàóË°®
      operationId: getGroupTopicsByGroupName
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 40
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: groupName
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Topic'
                    type: array
                  total:
                    type: integer
                required:
                  - data
                  - total
                type: object
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NotFoundError:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: topic not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Â∞èÁªÑ‰∏çÂ≠òÂú®
          description: Â∞èÁªÑ‰∏çÂ≠òÂú®
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - topic
    post:
      operationId: createNewGroupTopic
      parameters:
        - example: sandbox
          in: path
          name: groupName
          required: true
          schema:
            minLength: 1
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreation'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: new topic id
                    type: integer
                required:
                  - id
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - group
  /p1/login:
    post:
      description: >-
        ÈúÄË¶Å
        [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)


        next.bgm.tv ÂüüÂêçÂØπÂ∫îÁöÑ site-key ‰∏∫ `0x4AAAAAAABkMYinukE8nzYS`


        dev.bgm38.com ÂüüÂêç‰ΩøÁî®ÊµãËØïÁî®ÁöÑ site-key `1x00000000000000000000AA`
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Default Response
          headers:
            Set-Cookie:
              description: 'example: "chiiNextSessionID=12345abc"'
              schema:
                type: string
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: request validation error
          description: request validation error
        '401':
          content:
            application/json:
              examples:
                CAPTCHA_ERROR:
                  value:
                    code: CAPTCHA_ERROR
                    error: Unauthorized
                    message: wrong captcha
                    statusCode: 401
                EMAIL_PASSWORD_ERROR:
                  value:
                    code: EMAIL_PASSWORD_ERROR
                    error: Unauthorized
                    message: email does not exists or email and password not match
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: È™åËØÅÁ†ÅÈîôËØØ/Ë¥¶Âè∑ÂØÜÁ†Å‰∏çÂåπÈÖç
          description: È™åËØÅÁ†ÅÈîôËØØ/Ë¥¶Âè∑ÂØÜÁ†Å‰∏çÂåπÈÖç
          headers:
            X-RateLimit-Limit:
              description: total limit per 10 minutes
              schema:
                type: integer
            X-RateLimit-Remaining:
              description: remaining rate limit
              schema:
                type: integer
            X-RateLimit-Reset:
              description: seconds to reset rate limit
              schema:
                type: integer
        '429':
          content:
            application/json:
              example:
                code: TOO_MANY_REQUESTS
                error: Too Many Requests
                message: too many failed login attempts
                statusCode: 429
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Â§±Ë¥•Ê¨°Êï∞Â§™Â§öÔºåÈúÄË¶ÅËøá‰∏ÄÊÆµÊó∂Èó¥ÂÜçÈáçËØï
          description: Â§±Ë¥•Ê¨°Êï∞Â§™Â§öÔºåÈúÄË¶ÅËøá‰∏ÄÊÆµÊó∂Èó¥ÂÜçÈáçËØï
          headers:
            X-RateLimit-Limit:
              description: limit per 10 minutes
              schema:
                type: integer
            X-RateLimit-Remaining:
              description: remaining rate limit
              schema:
                type: integer
            X-RateLimit-Reset:
              description: seconds to reset rate limit
              schema:
                type: integer
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - user
  /p1/logout:
    post:
      description: ÁôªÂá∫
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NeedLoginError:
                  value:
                    code: NEED_LOGIN
                    error: Unauthorized
                    message: you need to login before logout
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Êú™ÁôªÂΩï
          description: Êú™ÁôªÂΩï
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - user
  /p1/me:
    get:
      operationId: getCurrentUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
          description: Default Response
        '401':
          content:
            application/json:
              example:
                code: NEED_LOGIN
                error: Unauthorized
                message: you need to login before get current user
                statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - user
  /p1/notify:
    get:
      operationId: listNotice
      parameters:
        - description: max 40
          in: query
          name: limit
          required: false
          schema:
            default: 20
            maximum: 40
            type: integer
        - in: query
          name: unread
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Notice'
                    type: array
                  total:
                    type: integer
                required:
                  - data
                  - total
                type: object
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NeedLoginError:
                  value:
                    code: NEED_LOGIN
                    error: Unauthorized
                    message: you need to login before getting notifications
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Êú™ÁôªÂΩï
          description: Êú™ÁôªÂΩï
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      summary: Ëé∑ÂèñÊú™ËØªÈÄöÁü•
      tags:
        - user
  /p1/subjects/-/episode/-/comments/{commentID}:
    delete:
      operationId: deleteSubjectEpComment
      parameters:
        - example: 1034989
          in: path
          name: commentID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to delete this comment
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: comment not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Âà†Èô§Êù°ÁõÆÁöÑÂâßÈõÜÂêêÊßΩ
      tags:
        - subject
    put:
      operationId: editSubjectEpComment
      parameters:
        - example: 1075440
          in: path
          name: commentID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            example:
              content: new comment contents
            schema:
              properties:
                content:
                  minLength: 1
                  type: string
              required:
                - content
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: ÁºñËæëÊù°ÁõÆÁöÑÂâßÈõÜÂêêÊßΩ
      tags:
        - subject
  /p1/subjects/-/episode/{episodeID}/comments:
    get:
      operationId: getSubjectEpisodeComments
      parameters:
        - example: 1075440
          in: path
          name: episodeID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  allOf:
                    - properties:
                        content:
                          type: string
                        createdAt:
                          type: integer
                        creatorID:
                          type: integer
                        epID:
                          type: integer
                        id:
                          type: integer
                        relatedID:
                          type: integer
                        state:
                          type: integer
                        user:
                          $ref: '#/components/schemas/User'
                      required:
                        - id
                        - epID
                        - creatorID
                        - relatedID
                        - createdAt
                        - content
                        - state
                        - user
                      type: object
                    - properties:
                        replies:
                          items:
                            $ref: '#/components/schemas/BaseEpisodeComment'
                          type: array
                      required:
                        - replies
                      type: object
                  type: object
                type: array
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑ÂèñÊù°ÁõÆÁöÑÂâßÈõÜÂêêÊßΩÁÆ±
      tags:
        - subject
    post:
      description: >-
        ÈúÄË¶Å
        [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)


        next.bgm.tv ÂüüÂêçÂØπÂ∫îÁöÑ site-key ‰∏∫ `0x4AAAAAAABkMYinukE8nzYS`


        dev.bgm38.com ÂüüÂêç‰ΩøÁî®ÊµãËØïÁî®ÁöÑ site-key `1x00000000000000000000AA`
      operationId: createSubjectEpComment
      parameters:
        - example: 1075440
          in: path
          name: episodeID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            examples:
              example1:
                value:
                  cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
                  content: comment contents
              example2:
                value:
                  cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
                  content: comment contents
                  replyTo: 2
            schema:
              properties:
                cf-turnstile-response:
                  minLength: 1
                  type: string
                content:
                  minLength: 1
                  type: string
                replyTo:
                  default: 0
                  description: Ë¢´ÂõûÂ§çÁöÑÂêêÊßΩ ID, `0` ‰ª£Ë°®ÂèëÈÄÅÈ°∂Â±ÇÂêêÊßΩ
                  example: 0
                  type: integer
              required:
                - content
                - cf-turnstile-response
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicReply'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: ÂàõÂª∫Êù°ÁõÆÁöÑÂâßÈõÜÂêêÊßΩ
      tags:
        - subject
  /p1/subjects/-/posts/{postID}:
    delete:
      operationId: deleteSubjectPost
      parameters:
        - example: 2092074
          in: path
          name: postID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to delete this post
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: post not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Âà†Èô§Ëá™Â∑±ÂàõÂª∫ÁöÑÊù°ÁõÆËÆ®ËÆ∫ÁâàÂõûÂ§ç
      tags:
        - subject
    get:
      operationId: getSubjectPost
      parameters:
        - example: 2092074
          in: path
          name: postID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupReply'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: post not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Ëé∑ÂèñÊù°ÁõÆËÆ®ËÆ∫ÁâàÂõûÂ§ç
      tags:
        - subject
    put:
      operationId: editSubjectPost
      parameters:
        - example: 2092074
          in: path
          name: postID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            example:
              text: new post contents
            schema:
              properties:
                text:
                  minLength: 1
                  type: string
              required:
                - text
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to edit reply
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: ÁºñËæëËá™Â∑±ÂàõÂª∫ÁöÑÊù°ÁõÆËÆ®ËÆ∫ÁâàÂõûÂ§ç
      tags:
        - subject
  /p1/subjects/-/topics/{topicID}:
    get:
      operationId: getSubjectTopicDetail
      parameters:
        - example: 1
          in: path
          name: topicID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicDetail'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Ëé∑ÂèñÂ∏ñÂ≠êÂàóË°®
      tags:
        - subject
    put:
      operationId: editSubjectTopic
      parameters:
        - example: 371602
          in: path
          name: topicID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreation'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to edit a topic
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: ÁºñËæëËá™Â∑±ÂàõÂª∫ÁöÑÊù°ÁõÆËÆ®ËÆ∫Áâà
      tags:
        - subject
  /p1/subjects/-/topics/{topicID}/replies:
    post:
      description: >-
        ÈúÄË¶Å
        [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)


        next.bgm.tv ÂüüÂêçÂØπÂ∫îÁöÑ site-key ‰∏∫ `0x4AAAAAAABkMYinukE8nzYS`


        dev.bgm38.com ÂüüÂêç‰ΩøÁî®ÊµãËØïÁî®ÁöÑ site-key `1x00000000000000000000AA`
      operationId: createSubjectReply
      parameters:
        - example: 371602
          in: path
          name: topicID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            examples:
              example1:
                value:
                  cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
                  content: post contents
              example2:
                value:
                  cf-turnstile-response: 10000000-aaaa-bbbb-cccc-000000000001
                  content: post contents
                  replyTo: 2
            schema:
              properties:
                cf-turnstile-response:
                  minLength: 1
                  type: string
                content:
                  minLength: 1
                  type: string
                replyTo:
                  default: 0
                  description: Ë¢´ÂõûÂ§çÁöÑ topic ID, `0` ‰ª£Ë°®ÂõûÂ§çÊ•º‰∏ª
                  example: 0
                  type: integer
              required:
                - content
                - cf-turnstile-response
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicReply'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_JOIN_PRIVATE_GROUP_ERROR:
                  value:
                    code: NOT_JOIN_PRIVATE_GROUP_ERROR
                    error: Unauthorized
                    message: >-
                      you need to join private group 'Ê≤ôÁõí' before you create a
                      post or reply
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: ÂàõÂª∫Êù°ÁõÆËÆ®ËÆ∫ÁâàÂõûÂ§ç
      tags:
        - subject
  /p1/subjects/{subjectID}/comments:
    get:
      operationId: subjectComments
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            minimum: 0
            type: integer
        - example: 8
          in: path
          name: subjectID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectInterestComment'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑ÂèñÊù°ÁõÆÁöÑÂêêÊßΩÁÆ±
      tags:
        - subject
  /p1/subjects/{subjectID}/topics:
    get:
      operationId: getSubjectTopicsBySubjectId
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 40
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: subjectID
          required: true
          schema:
            exclusiveMinimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Topic'
                    type: array
                  total:
                    type: integer
                required:
                  - data
                  - total
                type: object
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NotFoundError:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: topic not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: Êù°ÁõÆ‰∏çÂ≠òÂú®
          description: Êù°ÁõÆ‰∏çÂ≠òÂú®
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: Ëé∑ÂèñÊù°ÁõÆËÆ®ËÆ∫ÁâàÂàóË°®
      tags:
        - subject
    post:
      description: >-
        ÈúÄË¶Å
        [turnstile](https://developers.cloudflare.com/turnstile/get-started/client-side-rendering/)


        next.bgm.tv ÂüüÂêçÂØπÂ∫îÁöÑ site-key ‰∏∫ `0x4AAAAAAABkMYinukE8nzYS`


        dev.bgm38.com ÂüüÂêç‰ΩøÁî®ÊµãËØïÁî®ÁöÑ site-key `1x00000000000000000000AA`
      operationId: createNewSubjectTopic
      parameters:
        - example: 114514
          in: path
          name: subjectID
          required: true
          schema:
            minimum: 0
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreation'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  id:
                    description: new topic id
                    type: integer
                required:
                  - id
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      summary: ÂàõÂª∫Êù°ÁõÆËÆ®ËÆ∫Áâà
      tags:
        - subject
  /p1/turnstile:
    get:
      description: ‰∏∫Èò≤Ê≠¢Êª•Áî®ÔºåRedirect URI ‰∏∫ÁôΩÂêçÂçïÊú∫Âà∂ÔºåÂ¶ÇÈúÄÊ∑ªÂä†ËØ∑Êèê‰∫§ PR„ÄÇ
      operationId: getTurnstileToken
      parameters:
        - in: query
          name: theme
          required: false
          schema:
            anyOf:
              - enum:
                  - dark
                type: string
              - enum:
                  - light
                type: string
              - enum:
                  - auto
                type: string
        - in: query
          name: redirect_uri
          required: true
          schema:
            type: string
      responses:
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑Âèñ Turnstile ‰ª§Áâå
      tags:
        - user
  /p1/users/{username}/collections/characters:
    get:
      operationId: getUserCharacterCollections
      parameters:
        - description: max 100
          in: query
          name: limit
          required: false
          schema:
            default: 20
            maximum: 100
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: username
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑ÂèñÁî®Êà∑ËßíËâ≤Êî∂Ëóè
      tags:
        - collection
  /p1/users/{username}/collections/persons:
    get:
      operationId: getUserPersonCollections
      parameters:
        - description: max 100
          in: query
          name: limit
          required: false
          schema:
            default: 20
            maximum: 100
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: username
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑ÂèñÁî®Êà∑‰∫∫Áâ©Êî∂Ëóè
      tags:
        - collection
  /p1/users/{username}/collections/subjects:
    get:
      operationId: getUserSubjectCollections
      parameters:
        - description: Êù°ÁõÆÁ±ªÂûã
          in: query
          name: subjectType
          required: false
          schema:
            anyOf:
              - enum:
                  - 1
                type: number
              - enum:
                  - 2
                type: number
              - enum:
                  - 3
                type: number
              - enum:
                  - 4
                type: number
              - enum:
                  - 6
                type: number
        - description: Êî∂ËóèÁ±ªÂûã
          in: query
          name: type
          required: false
          schema:
            anyOf:
              - enum:
                  - 1
                type: number
              - enum:
                  - 2
                type: number
              - enum:
                  - 3
                type: number
              - enum:
                  - 4
                type: number
              - enum:
                  - 5
                type: number
        - description: max 100
          in: query
          name: limit
          required: false
          schema:
            default: 20
            maximum: 100
            type: integer
        - in: query
          name: offset
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: username
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserSubjectCollection'
                    type: array
                  total:
                    type: integer
                required:
                  - data
                  - total
                type: object
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: user not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑ÂèñÁî®Êà∑Êù°ÁõÆÊî∂Ëóè
      tags:
        - collection
  /p1/users/{username}/collections/summary:
    get:
      operationId: getUserCollectionsSummary
      parameters:
        - in: path
          name: username
          required: true
          schema:
            minLength: 1
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollectionsSummary'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: user not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Ëé∑ÂèñÁî®Êà∑Êî∂ËóèÊ¶ÇËßà
      tags:
        - collection
  /p1/wiki/ep/{episodeID}:
    get:
      operationId: getEpisodeWikiInfo
      parameters:
        - example: 1148124
          in: path
          name: episodeID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              example:
                date: '2012-12-23'
                duration: '00:23:37'
                ep: 60
                id: 1148124
                name: „Ç≠„Éû„É™√ó„Éà√ó„Éè„Ç∏„Éû„É™
                nameCN: ÁªìÊú´√ó‰∏é√óÂºÄÂßã
                subjectID: 65536
                summary: >-
                  „Ç¥„É≥„Å®„Ç≠„É´„Ç¢„ÅØG.I.„Éó„É¨„Ç§„É§„ÉºÈÅ∏ËÄÉ‰ºö„Å´„ÅÑ„Çà„ÅÑ„ÇàÊåëÊà¶„Åô„Çã„ÄÇÂØ©Êüª„ÇíÊãÖÂΩì„Åô„Çã„ÉÑ„Çß„Ç∫„Ç≤„É©„Åã„ÇâÊèêÁ§∫„Åï„Çå„ÅüÂêàÊ†º„ÅÆÊù°‰ª∂„ÅØ„Åü„Å†‰∏Ä„Å§„ÄåÁ∑¥„ÇíË¶ã„Åõ„Çã„Äç„Åì„Å®„ÄÇÂêàÊ†º„Åß„Åç„ÇãËÄÖ„ÅØ200‰∫∫‰∏≠32Âêç„Å®„ÅÑ„ÅÜÁã≠„ÅçÈñÄ„Å†„Åå„ÄÅ„Ç¥„É≥„Å®„Ç≠„É´„Ç¢„ÅØ„Åè„Åê„ÇäÊäú„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Çã„ÅÆ„ÅãÔºÅÔºü
                type: 0
              schema:
                $ref: '#/components/schemas/EpisodeWikiInfo'
          description: Default Response
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: episode not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - wiki
    patch:
      operationId: patchEpisodeWikiInfo
      parameters:
        - example: 1148124
          in: path
          name: episodeID
          required: true
          schema:
            minimum: 0
            type: integer
      requestBody:
        content:
          application/json:
            example:
              commitMessage: why this episode is edited
              episode:
                date: '2022-01-20'
                duration: '24:53'
                ep: 4
                name: name
                nameCN: ‰∏≠ÊñáÂêç
                summary: a short description
                type: 0
            schema:
              properties:
                commitMessage:
                  type: string
                episode:
                  properties:
                    date:
                      description: YYYY-MM-DD
                      example: '2022-02-02'
                      pattern: ^\d{4}-\d{2}-\d{2}$
                      type: string
                    duration:
                      example: '24:53'
                      type: string
                    ep:
                      type: number
                    name:
                      type: string
                    nameCN:
                      type: string
                    subjectID:
                      type: integer
                    summary:
                      type: string
                    type:
                      anyOf:
                        - enum:
                            - 0
                          type: number
                        - enum:
                            - 1
                          type: number
                        - enum:
                            - 2
                          type: number
                        - enum:
                            - 3
                          type: number
                        - enum:
                            - 4
                          type: number
                        - enum:
                            - 5
                          type: number
                        - enum:
                            - 6
                          type: number
                  type: object
              required:
                - commitMessage
                - episode
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: invalid input
          description: invalid input
        '404':
          content:
            application/json:
              examples:
                NOT_FOUND:
                  value:
                    code: NOT_FOUND
                    error: Not Found
                    message: episode 1 not found
                    statusCode: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - wiki
  /p1/wiki/lock/subjects:
    post:
      operationId: lockSubject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reason:
                  type: string
                subjectID:
                  example: 184017
                  type: integer
              required:
                - subjectID
                - reason
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - wiki
  /p1/wiki/persons/{personID}:
    get:
      description: Ëé∑ÂèñÂΩìÂâçÁöÑ wiki ‰ø°ÊÅØ
      operationId: getPersonWikiInfo
      parameters:
        - example: 1
          in: path
          name: personID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectWikiInfo'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ËßíËâ≤‰∏çÂ≠òÂú®
          description: ËßíËâ≤‰∏çÂ≠òÂú®
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      tags:
        - wiki
    patch:
      operationId: patchPersonInfo
      parameters:
        - example: 1
          in: path
          name: personID
          required: true
          schema:
            minimum: 0
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                commitMessage:
                  minLength: 1
                  type: string
                expectedRevision:
                  additionalProperties: false
                  default: {}
                  properties:
                    infobox:
                      minLength: 1
                      type: string
                    name:
                      minLength: 1
                      type: string
                    summary:
                      type: string
                  type: object
                person:
                  additionalProperties: false
                  properties:
                    infobox:
                      minLength: 1
                      type: string
                    name:
                      minLength: 1
                      type: string
                    summary:
                      type: string
                  type: object
              required:
                - commitMessage
                - expectedRevision
                - person
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '400':
          content:
            application/json:
              examples:
                WIKI_CHANGED:
                  value:
                    code: WIKI_CHANGED
                    error: Bad Request
                    message: >-
                      expected data doesn't match, name changed, expecting "1",
                      currently "2"
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      tags:
        - wiki
  /p1/wiki/recent:
    get:
      description: Ëé∑ÂèñÊúÄËøë‰∏§Â§©ÁöÑwikiÊõ¥Êñ∞
      operationId: getRecentWiki
      parameters:
        - description: |-
            unix time stamp, only return last update time >= since

            only allow recent 2 days
          in: path
          name: since
          required: true
          schema:
            default: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentWikiChange'
          description: Default Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - wiki
  /p1/wiki/subjects:
    post:
      description: ÂàõÂª∫Êñ∞Êù°ÁõÆ
      operationId: createNewSubject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                infobox:
                  minLength: 1
                  type: string
                name:
                  minLength: 1
                  type: string
                nsfw:
                  type: boolean
                platform:
                  type: integer
                summary:
                  type: string
                type:
                  anyOf:
                    - enum:
                        - 1
                      type: number
                    - enum:
                        - 2
                      type: number
                    - enum:
                        - 3
                      type: number
                    - enum:
                        - 4
                      type: number
                    - enum:
                        - 6
                      type: number
              required:
                - name
                - type
                - platform
                - infobox
                - nsfw
                - summary
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  subjectID:
                    type: number
                required:
                  - subjectID
                type: object
          description: Default Response
        '400':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
          HTTPBearer: []
      tags:
        - wiki
  /p1/wiki/subjects/{subjectID}:
    get:
      description: Ëé∑ÂèñÂΩìÂâçÁöÑ wiki ‰ø°ÊÅØ
      operationId: subjectInfo
      parameters:
        - example: 363612
          in: path
          name: subjectID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectWikiInfo'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - wiki
    patch:
      operationId: patchSubjectInfo
      parameters:
        - example: 363612
          in: path
          name: subjectID
          required: true
          schema:
            minimum: 0
            type: integer
      requestBody:
        content:
          application/json:
            example:
              commitMessage: ‰øÆÊ≠£Á¨îËØØ
              subject:
                infobox: |-
                  {{Infobox animanga/TVAnime
                  |‰∏≠ÊñáÂêç= Ê≤ôÁõí
                  |Âà´Âêç={
                  }
                  |ËØùÊï∞= 7
                  |ÊîæÈÄÅÂºÄÂßã= 0000-10-06
                  |ÊîæÈÄÅÊòüÊúü= 
                  |ÂÆòÊñπÁΩëÁ´ô= 
                  |Êí≠ÊîæÁîµËßÜÂè∞= 
                  |ÂÖ∂‰ªñÁîµËßÜÂè∞= 
                  |Êí≠ÊîæÁªìÊùü= 
                  |ÂÖ∂‰ªñ= 
                  |Copyright= 
                  |Âπ≥Âè∞={
                  [ÈæüÂ£≥]
                  [Xbox Series S]
                  [Xbox Series X]
                  [Xbox Series X/S]
                  [PC]
                  [Xbox Series X|S]
                  }
                  }}
            schema:
              properties:
                commitMessage:
                  minLength: 1
                  type: string
                expectedRevision:
                  description: >-
                    a optional object to check if input is changed by others

                    if `infobox` is given, and current data in database doesn't
                    match input, subject will not be changed
                  properties:
                    infobox:
                      minLength: 1
                      type: string
                    metaTags:
                      type: string
                    name:
                      minLength: 1
                      type: string
                    platform:
                      type: integer
                  type: object
                subject:
                  example:
                    infobox: |-
                      {{Infobox animanga/TVAnime
                      |‰∏≠ÊñáÂêç= Ê≤ôÁõí
                      |Âà´Âêç={
                      }
                      |ËØùÊï∞= 7
                      |ÊîæÈÄÅÂºÄÂßã= 0000-10-06
                      |ÊîæÈÄÅÊòüÊúü= 
                      |ÂÆòÊñπÁΩëÁ´ô= 
                      |Êí≠ÊîæÁîµËßÜÂè∞= 
                      |ÂÖ∂‰ªñÁîµËßÜÂè∞= 
                      |Êí≠ÊîæÁªìÊùü= 
                      |ÂÖ∂‰ªñ= 
                      |Copyright= 
                      |Âπ≥Âè∞={
                      [ÈæüÂ£≥]
                      [Xbox Series S]
                      [Xbox Series X]
                      [Xbox Series X/S]
                      [PC]
                      [Xbox Series X|S]
                      }
                      }}
                    name: Ê≤ôÁõí
                    nsfw: false
                    platform: 0
                    summary: >-
                      Êú¨Êù°ÁõÆÊòØ‰∏Ä‰∏™Ê≤ôÁõíÔºåÂèØ‰ª•Áî®‰∫éÂ∞ùËØïbgmÂäüËÉΩ„ÄÇ


                      ÊôÆÈÄöÁª¥Âü∫‰∫∫ÂèØ‰ª•ÈöèÊÑèÁºñËæëÊù°ÁõÆ‰ø°ÊÅØ‰ª•ÂèäÁõ∏ÂÖ≥ÂÖ≥ËÅîÊü•ÁúãÁºñËæëÊïàÊûúÔºå‰ΩÜÊòØËØ∑‰∏çË¶ÅÂÆåÂÖ®Âà†Èô§Ê≤ôÁõíËØ¥ÊòéÂπ∂‰∏î‰∏çË¶ÅÂÖ≥ËÅîÈùûÊ≤ôÁõíÊù°ÁõÆ/‰∫∫Áâ©/ËßíËâ≤„ÄÇ


                      https://bgm.tv/group/topic/366812#post_1923517
                  properties:
                    date:
                      example: '0000-00-00'
                      pattern: ^\d{4}-\d{2}-\d{2}$
                      type: string
                    infobox:
                      minLength: 1
                      type: string
                    metaTags:
                      items:
                        type: string
                      type: array
                    name:
                      minLength: 1
                      type: string
                    nsfw:
                      type: boolean
                    platform:
                      type: integer
                    summary:
                      type: string
                  type: object
              required:
                - commitMessage
                - subject
              type: object
        required: true
      responses:
        '200':
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - wiki
    put:
      description: ÈúÄË¶Å `subjectWikiEdit` ÊùÉÈôê
      operationId: putSubjectInfo
      parameters:
        - example: 363612
          in: path
          name: subjectID
          required: true
          schema:
            minimum: 0
            type: integer
      requestBody:
        content:
          application/json:
            example:
              commitMessage: ‰øÆÊ≠£Á¨îËØØ
              subject:
                infobox: |-
                  {{Infobox animanga/TVAnime
                  |‰∏≠ÊñáÂêç= Ê≤ôÁõí
                  |Âà´Âêç={
                  }
                  |ËØùÊï∞= 7
                  |ÊîæÈÄÅÂºÄÂßã= 0000-10-06
                  |ÊîæÈÄÅÊòüÊúü= 
                  |ÂÆòÊñπÁΩëÁ´ô= 
                  |Êí≠ÊîæÁîµËßÜÂè∞= 
                  |ÂÖ∂‰ªñÁîµËßÜÂè∞= 
                  |Êí≠ÊîæÁªìÊùü= 
                  |ÂÖ∂‰ªñ= 
                  |Copyright= 
                  |Âπ≥Âè∞={
                  [ÈæüÂ£≥]
                  [Xbox Series S]
                  [Xbox Series X]
                  [Xbox Series X/S]
                  [PC]
                  [Xbox Series X|S]
                  }
                  }}
                name: Ê≤ôÁõí
                nsfw: false
                platform: 0
                summary: |-
                  Êú¨Êù°ÁõÆÊòØ‰∏Ä‰∏™Ê≤ôÁõíÔºåÂèØ‰ª•Áî®‰∫éÂ∞ùËØïbgmÂäüËÉΩ„ÄÇ

                  ÊôÆÈÄöÁª¥Âü∫‰∫∫ÂèØ‰ª•ÈöèÊÑèÁºñËæëÊù°ÁõÆ‰ø°ÊÅØ‰ª•ÂèäÁõ∏ÂÖ≥ÂÖ≥ËÅîÊü•ÁúãÁºñËæëÊïàÊûúÔºå‰ΩÜÊòØËØ∑‰∏çË¶ÅÂÆåÂÖ®Âà†Èô§Ê≤ôÁõíËØ¥ÊòéÂπ∂‰∏î‰∏çË¶ÅÂÖ≥ËÅîÈùûÊ≤ôÁõíÊù°ÁõÆ/‰∫∫Áâ©/ËßíËâ≤„ÄÇ

                  https://bgm.tv/group/topic/366812#post_1923517
            schema:
              properties:
                commitMessage:
                  minLength: 1
                  type: string
                expectedRevision:
                  description: >-
                    a optional object to check if input is changed by others

                    if `infobox` is given, and current data in database doesn't
                    match input, subject will not be changed
                  properties:
                    infobox:
                      minLength: 1
                      type: string
                    metaTags:
                      type: string
                    name:
                      minLength: 1
                      type: string
                    platform:
                      type: integer
                  type: object
                subject:
                  $ref: '#/components/schemas/SubjectEdit'
              required:
                - commitMessage
                - subject
              type: object
        required: true
      responses:
        '200':
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - wiki
  /p1/wiki/subjects/{subjectID}/covers:
    get:
      operationId: listSubjectCovers
      parameters:
        - example: 184017
          in: path
          name: subjectID
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  covers:
                    items:
                      properties:
                        creator:
                          properties:
                            avatar:
                              properties:
                                large:
                                  type: string
                                medium:
                                  example: sai
                                  type: string
                                small:
                                  type: string
                              required:
                                - small
                                - medium
                                - large
                              title: Avatar
                              type: object
                            id:
                              example: 1
                              type: integer
                            nickname:
                              example: Saiüññ
                              type: string
                            sign:
                              type: string
                            user_group:
                              type: integer
                            username:
                              example: sai
                              type: string
                          required:
                            - id
                            - username
                            - nickname
                            - avatar
                            - sign
                            - user_group
                          title: User
                          type: object
                        id:
                          type: integer
                        raw:
                          type: string
                        thumbnail:
                          type: string
                        voted:
                          type: boolean
                      required:
                        - id
                        - thumbnail
                        - raw
                        - creator
                        - voted
                      type: object
                    type: array
                  current:
                    properties:
                      id:
                        type: integer
                      raw:
                        type: string
                      thumbnail:
                        type: string
                    required:
                      - thumbnail
                      - raw
                      - id
                    type: object
                required:
                  - covers
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - wiki
    post:
      description: ÈúÄË¶Å `subjectWikiEdit` ÊùÉÈôê
      operationId: uploadSubjectCover
      parameters:
        - in: path
          name: subjectID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  description: base64 encoded raw bytes, 4mb size limit on **decoded** size
                  format: byte
                  type: string
              required:
                - content
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '400':
          content:
            application/json:
              examples:
                IMAGE_FILE_TOO_LARGE:
                  value:
                    code: IMAGE_FILE_TOO_LARGE
                    error: Bad Request
                    message: uploaded image file is too large
                    statusCode: 400
                IMAGE_FORMAT_NOT_SUPPORT:
                  value:
                    code: IMAGE_FORMAT_NOT_SUPPORT
                    error: Bad Request
                    message: not valid image file, only support jpeg, jpg, png, webp
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                NOT_ALLOWED:
                  value:
                    code: NOT_ALLOWED
                    error: Unauthorized
                    message: you don't have permission to non sandbox subject
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - wiki
  /p1/wiki/subjects/{subjectID}/covers/{imageID}/vote:
    delete:
      description: ÈúÄË¶Å `subjectWikiEdit` ÊùÉÈôê
      operationId: unvoteSubjectCover
      parameters:
        - in: path
          name: subjectID
          required: true
          schema:
            exclusiveMinimum: 0
            type: integer
        - in: path
          name: imageID
          required: true
          schema:
            exclusiveMinimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: Êí§Ê∂àÊù°ÁõÆÂ∞ÅÈù¢ÊäïÁ•®
      tags:
        - wiki
    post:
      description: ÈúÄË¶Å `subjectWikiEdit` ÊùÉÈôê
      operationId: voteSubjectCover
      parameters:
        - in: path
          name: subjectID
          required: true
          schema:
            exclusiveMinimum: 0
            type: integer
        - in: path
          name: imageID
          required: true
          schema:
            exclusiveMinimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      summary: ‰∏∫Êù°ÁõÆÂ∞ÅÈù¢ÊäïÁ•®
      tags:
        - wiki
  /p1/wiki/subjects/{subjectID}/history-summary:
    get:
      description: Ëé∑ÂèñÂΩìÂâçÁöÑ wiki ‰ø°ÊÅØ
      operationId: subjectEditHistorySummary
      parameters:
        - example: 8
          in: path
          name: subjectID
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HistorySummary'
                type: array
          description: Default Response
        '401':
          content:
            application/json:
              examples:
                INVALID_SYNTAX_ERROR:
                  value:
                    code: INVALID_SYNTAX_ERROR
                    error: Bad Request
                    message: '%s'
                    statusCode: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      security:
        - CookiesSession: []
      tags:
        - wiki
  /p1/wiki/unlock/subjects:
    post:
      operationId: unlockSubject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                reason:
                  type: string
                subjectID:
                  example: 184017
                  type: integer
              required:
                - subjectID
                - reason
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: Default Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
          description: ÊÑèÊñô‰πãÂ§ñÁöÑÊúçÂä°Âô®ÈîôËØØ
      tags:
        - wiki
